import { NodeId, DisplayScreen, INodeFocus, OptionNode } from "./control.interface";
declare class ManagerControl {
    private static _instance;
    private nodes;
    private treeNodes;
    private screenNodes;
    private rootNodeId;
    private currentScreen;
    private displayName;
    private _emitter_;
    private currentNode;
    private lastNodeIdScreen;
    private classnameActiveFocus;
    private timer;
    private timerClick;
    private lockCheckFocus;
    static getInstance(): ManagerControl;
    static clear(): void;
    constructor();
    setClassnameActiveFocus(className: string): void;
    trigger(event: string, ...data: Array<any>): void;
    private destroy;
    private _init;
    setRootId(id: NodeId): void;
    setCurrentScreen(screen: DisplayScreen): void;
    getCurrentNodeId: () => NodeId | undefined;
    setLockFocus: (lockCheckFocus?: boolean) => void;
    registerNode(nodeId: NodeId, options: OptionNode): ManagerControl;
    private _updateNode;
    private _removeNode;
    unregisterNode(nodeId: NodeId, ..._args: any[]): ManagerControl;
    mountedScreen(displayScreen: DisplayScreen, ..._args: any[]): ManagerControl;
    unmoutedScreen(displayScreen: DisplayScreen, ..._args: any[]): ManagerControl;
    private getNode;
    private getNodesCurrentScreent;
    private getNodesHighestLayoutIndex;
    private _getMaxLayoutIndex;
    init(config: {
        ignoreRepeatedEventsWhenKeyHeldDown?: boolean;
    }): void;
    private focusedElementEmitter;
    private unfocusedElementEmitter;
    private onKeydown;
    focusNodeById(nodeId: NodeId | undefined, click?: boolean): void;
    focusLastNodeIdScreen(node?: INodeFocus): void;
    focusDefaultNodeIdScreen(nodeId: NodeId): void;
    private _focusExeptDefault;
    checkNodeInHighestLayout(nodeId: NodeId | undefined): boolean;
    focusNodeInHighestLayout(): void;
}
export default ManagerControl;
